/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJDialog.java
 *
 * Created on Apr 9, 2010, 2:06:38 PM
 */

package com.hyk.proxy.gae.client.launch.gui;

import com.hyk.proxy.gae.client.config.AppIdAuth;
import com.hyk.proxy.gae.client.config.Config;
import com.hyk.proxy.gae.client.config.ProxyInfo;
import com.hyk.proxy.gae.client.config.XmppAccount;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author qiying.wang
 */
public class ConfigDialog extends javax.swing.JDialog {

     class MyTableModel extends DefaultTableModel {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    }

    /** Creates new form NewJDialog */
    public ConfigDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setIconImage(ImageUtil.CONFIG.getImage());
        appIdTableModel.addColumn("AppId");
        xmppTableModel.addColumn("XMPP Account");
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        localServerHostText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        localServerPortText = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appidTable = new javax.swing.JTable();
        newAppIdButton = new javax.swing.JButton();
        modifyAppIdButton = new javax.swing.JButton();
        deleteAppIdButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        isXMPPEnable = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        localHttpProxyHostText = new javax.swing.JTextField();
        isHttpProxyEnable = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        localHttpProxyUserText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        localHttpProxyPassText = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        localHttpProxyPortText = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        xmppAccountTable = new javax.swing.JTable();
        newXmppButton = new javax.swing.JButton();
        modifyXmppButton = new javax.swing.JButton();
        removeXmppButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        compressorType = new javax.swing.JComboBox();
        compressorTrigger = new javax.swing.JTextField();
        threadPoolSizeText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        connectionPoolText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        fetcherNumText = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        rpcTimeoutText = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        fetchLimitTextField1 = new javax.swing.JTextField();
        applyButton = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuration");
        setAlwaysOnTop(true);
        setResizable(false);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Local Server Setting"));

        jLabel5.setText("Host:");

        localServerHostText.setText("localhost");

        jLabel6.setText("Port:");

        localServerPortText.setText("48100");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(localServerHostText, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(localServerPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(localServerHostText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localServerPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("AppIDs Setting"));

        appidTable.setModel(appIdTableModel);
        jScrollPane1.setViewportView(appidTable);

        newAppIdButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Button-Add-icon.png"))); // NOI18N
        newAppIdButton.setText("New...");
        newAppIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAppIdButtonActionPerformed(evt);
            }
        });

        modifyAppIdButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Modify.png"))); // NOI18N
        modifyAppIdButton.setText("Modify...");
        modifyAppIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyAppIdButtonActionPerformed(evt);
            }
        });

        deleteAppIdButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Button-Delete-icon.png"))); // NOI18N
        deleteAppIdButton.setText("Remove...");
        deleteAppIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAppIdButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(newAppIdButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifyAppIdButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteAppIdButton)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newAppIdButton)
                    .addComponent(modifyAppIdButton)
                    .addComponent(deleteAppIdButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(359, 359, 359))
        );

        jTabbedPane1.addTab("General", jPanel1);

        isXMPPEnable.setText("Enable XMPP");
        isXMPPEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isXMPPEnableActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Http Proxy Connection Setting"));

        jLabel1.setText("Server:");

        isHttpProxyEnable.setText("Enable Http Proxy");
        isHttpProxyEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isHttpProxyEnableActionPerformed(evt);
            }
        });

        jLabel2.setText("Username:");

        jLabel3.setText("Password:");

        jLabel4.setText("Port:");

        localHttpProxyPortText.setText("80");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(localHttpProxyHostText, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(isHttpProxyEnable)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(localHttpProxyUserText)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(localHttpProxyPortText)
                    .addComponent(localHttpProxyPassText, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(isHttpProxyEnable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(localHttpProxyHostText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(localHttpProxyPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(localHttpProxyUserText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(localHttpProxyPassText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("XMPP Accounts"));

        xmppAccountTable.setModel(xmppTableModel);
        jScrollPane3.setViewportView(xmppAccountTable);

        newXmppButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Button-Add-icon.png"))); // NOI18N
        newXmppButton.setText("New...");
        newXmppButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newXmppButtonActionPerformed(evt);
            }
        });

        modifyXmppButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Modify.png"))); // NOI18N
        modifyXmppButton.setText("Modify...");
        modifyXmppButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyXmppButtonActionPerformed(evt);
            }
        });

        removeXmppButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Button-Delete-icon.png"))); // NOI18N
        removeXmppButton.setText("Remove...");
        removeXmppButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeXmppButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(newXmppButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifyXmppButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeXmppButton)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newXmppButton)
                    .addComponent(modifyXmppButton)
                    .addComponent(removeXmppButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(isXMPPEnable)
                .addGap(428, 428, 428))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(isXMPPEnable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Connection", jPanel2);

        jLabel7.setText("Compress Trigger:");

        compressorType.setMaximumRowCount(4);
        compressorType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LZF", "GZ", "ZIP", "NONE" }));

        compressorTrigger.setText("512");

        threadPoolSizeText.setText("25");

        jLabel8.setText("Thread Pool Size:");

        jLabel9.setText("RPC Timeout:");

        jLabel10.setText("Connection Pool Size(per appid):");

        connectionPoolText.setText("7");

        jLabel11.setText("Fetcher Number for big file/video:");

        fetcherNumText.setText("3");

        jLabel12.setText("Compress Type:");

        rpcTimeoutText.setText("120");

        jLabel13.setText("Fetch Limit Size:");

        fetchLimitTextField1.setText("250000");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rpcTimeoutText, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                    .addComponent(connectionPoolText, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(compressorTrigger, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                                        .addComponent(fetcherNumText, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                                        .addComponent(threadPoolSizeText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                                        .addComponent(compressorType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(fetchLimitTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(107, 107, 107))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(rpcTimeoutText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(connectionPoolText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(fetcherNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(compressorType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(compressorTrigger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(threadPoolSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(fetchLimitTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Advance", jPanel3);

        applyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ok.png"))); // NOI18N
        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(applyButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyButton)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void enableXmpp()
    {
         newXmppButton.setEnabled(true);
            modifyXmppButton.setEnabled(true);
            removeXmppButton.setEnabled(true);
    }

    protected void disableXmpp()
    {
         newXmppButton.setEnabled(false);
         modifyXmppButton.setEnabled(false);
         removeXmppButton.setEnabled(false);
    }

    protected void disableHttpProxy()
    {
         localHttpProxyHostText.setEditable(false);
            localHttpProxyPortText.setEditable(false);
            localHttpProxyUserText.setEditable(false);
            localHttpProxyPassText.setEditable(false);
    }

    protected void enableHttpProxy()
    {
         localHttpProxyHostText.setEditable(true);
            localHttpProxyPortText.setEditable(true);
            localHttpProxyUserText.setEditable(true);
            localHttpProxyPassText.setEditable(true);
    }

    private void isXMPPEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isXMPPEnableActionPerformed
          if(isXMPPEnable.isSelected())
          {
              enableXmpp();
          }
          else
          {
              disableXmpp();
          }
    }//GEN-LAST:event_isXMPPEnableActionPerformed

    private void isHttpProxyEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isHttpProxyEnableActionPerformed
       if(isHttpProxyEnable.isSelected())
       {
           enableHttpProxy();
       }
       else
       {
           disableHttpProxy();
       }
    }//GEN-LAST:event_isHttpProxyEnableActionPerformed

    private void newAppIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAppIdButtonActionPerformed
        getAppIdDialog().startAddAppId( new UICallback() {
            public void callback(Object[] values) {
                appIdTableModel.addRow(new Object[]{values[0]});
                AppIdAuth auth = new AppIdAuth();
                auth.setAppid((String) values[0]);
                auth.setEmail((String) values[1]);
                auth.setPasswd((String) values[2]);
                appids.put(auth.getAppid(), auth);
            }
        });
        
    }//GEN-LAST:event_newAppIdButtonActionPerformed

    private void deleteAppIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAppIdButtonActionPerformed
        int row = appidTable.getSelectedRow();
        if(row >= 0)
        {
            String appid = (String) appIdTableModel.getValueAt(row, 0);
            appids.remove(appid);
            appIdTableModel.removeRow(row);
        }
    }//GEN-LAST:event_deleteAppIdButtonActionPerformed

    private void modifyAppIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyAppIdButtonActionPerformed
       int row = appidTable.getSelectedRow();
        if(row >= 0)
        {
            final String appid = (String) appIdTableModel.getValueAt(row, 0);
            getAppIdDialog().startModifyAppId(appids.get(appid), new UICallback() {
            public void callback(Object[] values) {
                 //appIdTableModel.removeRow(WIDTH)
                 //appids.remove(values[0]);
                appids.get(appid).setEmail((String) values[1]);
                appids.get(appid).setPasswd((String) values[2]);
            }
        });
        }

    }//GEN-LAST:event_modifyAppIdButtonActionPerformed

    private void newXmppButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newXmppButtonActionPerformed
        getXMPPAccountDialog().startAddAccount(new UICallback() {

            public void callback(Object[] values) {
                XmppAccount account = (XmppAccount) values[0];
                xmppAccounts.put(account.getJid(), account);
                xmppTableModel.addRow(new Object[]{account.getJid()});
            }
        });
    }//GEN-LAST:event_newXmppButtonActionPerformed

    private void modifyXmppButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyXmppButtonActionPerformed

        int row = xmppAccountTable.getSelectedRow();
        if(row >= 0)
        {
            String jid = (String) xmppAccountTable.getValueAt(row, 0);
            XmppAccount account = xmppAccounts.get(jid);
            getXMPPAccountDialog().startModifyAccount(account, new UICallback() {

            public void callback(Object[] values) {
                XmppAccount account = (XmppAccount) values[0];
                xmppAccounts.put(account.getJid(), account);
            }
        });
        }

    }//GEN-LAST:event_modifyXmppButtonActionPerformed

    private void removeXmppButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeXmppButtonActionPerformed
        int row = xmppAccountTable.getSelectedRow();
        if(row >= 0)
        {
            String jid = (String) xmppAccountTable.getValueAt(row, 0);
            xmppAccounts.remove(jid);
            xmppTableModel.removeRow(row);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_removeXmppButtonActionPerformed

    protected Properties buildConfProps()
    {
        Properties props = new Properties();
        if(!localServerHostText.getText().trim().equals(""))
        {
            props.setProperty(Config.LOCAL_SERVER_HOST, localServerHostText.getText().trim());
        }
        if(!localServerPortText.getText().trim().equals(""))
        {
            props.setProperty(Config.LOCAL_SERVER_PORT, localServerPortText.getText().trim());
        }
        int i = 1;
        for(AppIdAuth appid:appids.values())
        {
            props.setProperty(Config.APPID_CONFIG + "." + i , appid.getAppid());
            if(appid.getEmail() != null)
            {
                props.setProperty(Config.APPID_CONFIG + "." + i + ".auth.email" , appid.getEmail());
            }
            if(appid.getPasswd() != null)
            {
                 props.setProperty(Config.APPID_CONFIG + "." + i + ".auth.passwd" , appid.getPasswd());
            }
            i++;
        }
        i = 1;
       
        for(XmppAccount account: xmppAccounts.values())
        {
            props.setProperty(Config.XMPP_USER_CONFIG + "." + i, account.getJid());
            props.setProperty(Config.XMPP_PASS_CONFIG + "." + i, account.getPasswd());
            props.setProperty(Config.XMPP_SERVER_HOST_CONFIG+ "." + i, account.getServerHost());
            props.setProperty(Config.XMPP_SERVER_PORT_CONFIG+ "." + i, "" + account.getServerPort());
            props.setProperty(Config.XMPP_SERVER_OLDSSL_CONFIG+ "." + i, "" + account.isOldSSLEnable());
            i++;
        }
        if(isXMPPEnable.isSelected())
        {
            props.setProperty(Config.IS_HTTP_ENABLE, "false");
            props.setProperty(Config.IS_XMPP_ENABLE, "true");
        }
        else
        {
            props.setProperty(Config.IS_HTTP_ENABLE, "true");
        }

        if(isHttpProxyEnable.isSelected())
        {
            props.setProperty(Config.LOCAL_SERVER_HTTP_PROXY_HOST, localHttpProxyHostText.getText().trim());
            props.setProperty(Config.LOCAL_SERVER_HTTP_PROXY_PORT, localHttpProxyPortText.getText().trim());
            props.setProperty(Config.LOCAL_SERVER_HTTP_PROXY_USER, localHttpProxyUserText.getText().trim());
            props.setProperty(Config.LOCAL_SERVER_HTTP_PROXY_PASSWD, new String(localHttpProxyPassText.getPassword()).trim());
        }

        props.setProperty(Config.LOCAL_SERVER_SESSION_TIMEOUT, rpcTimeoutText.getText().trim());
        props.setProperty(Config.LOCAL_SERVER_THREAD_POOL_SIZE, threadPoolSizeText.getText().trim());
        props.setProperty(Config.LOCAL_SERVER_HTTP_MAX_FETCHER, fetcherNumText.getText().trim());
        props.setProperty(Config.LOCAL_SERVER_HTTP_CONNECTION_POOL_SIZE, connectionPoolText.getText().trim());
        props.setProperty(Config.LOCAL_SERVER_HTTP_FETCH_LIMIT, fetchLimitTextField1.getText().trim());
        props.setProperty(Config.LOCAL_SERVER_COMPRESSOR_TRIGGER, compressorTrigger.getText().trim());
        props.setProperty(Config.LOCAL_SERVER_COMPRESSOR_TYPE, compressorType.getSelectedItem().toString());
        
        //props.list(System.out);
        return props;
    }

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        try {
            Properties props = buildConfProps();
            Config config = Config.getInstance(props);
            config.storeToConf("##This file is generated from GUI launcher###");
            setVisible(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_applyButtonActionPerformed

    public void start() throws IOException
    {
        setLocationByPlatform(true);
        appids.clear();
        Config config = Config.getInstance();
        localServerHostText.setText(config.getLocalServerHost());
        localServerPortText.setText("" + config.getLocalServerPort());
        List<AppIdAuth> appids = config.getAppids();
        while(appIdTableModel.getRowCount() > 0)
        {
            appIdTableModel.removeRow(0);
        }
        for(AppIdAuth appid:appids)
        {
            appIdTableModel.addRow(new Object[]{appid.getAppid()});
            this.appids.put(appid.getAppid(), appid);
        }

        if(!config.isHttpEnable() && config.isXmppEnable())
        {
            isXMPPEnable.setSelected(true);
            while(xmppTableModel.getRowCount() > 0)
            {
                 xmppTableModel.removeRow(0);
            }
            List<XmppAccount> accounts = config.getAccounts();
            for(XmppAccount account:accounts)
            {
                xmppTableModel.addRow(new Object[]{account.getJid()});
            }
        }
        else
        {
            disableXmpp();
        }

        if(null != config.getProxyInfo())
        {
            ProxyInfo info = config.getProxyInfo();
            isHttpProxyEnable.setSelected(true);
            localHttpProxyHostText.setText(info.getHost());
            localHttpProxyPortText.setText(info.getPort() + "");
            localHttpProxyUserText.setText(info.getUser());
            localHttpProxyPassText.setText(info.getPassword());
        }
        else
        {
            isHttpProxyEnable.setSelected(false);
            disableHttpProxy();
        }

        rpcTimeoutText.setText(config.getSessionTimeout()/1000 + "");
        connectionPoolText.setText(config.getHttpConnectionPoolSize() + "");
        fetcherNumText.setText(config.getMaxFetcherForBigFile() + "");
        compressorTrigger.setText(config.getCompressorTrigger() + "");
        threadPoolSizeText.setText(config.getThreadPoolSize() + "");
        compressorType.setSelectedItem(config.getCompressorName().toUpperCase());
        fetchLimitTextField1.setText(config.getFetchLimitSize()+"");
        
        setVisible(true);
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                final ConfigDialog dialog = new ConfigDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

     protected AppIdDialog getAppIdDialog()
    {
        if(null == appidDialog)
        {
            appidDialog = new AppIdDialog(new javax.swing.JFrame(), true);
                appidDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        appidDialog.setVisible(false);
                    }
                });
                //appidDialog.setVisible(true);
        }
        return appidDialog;
    }

     protected XMPPAccountDialog getXMPPAccountDialog()
     {
         if(null == xmppDialog)
         {
             xmppDialog = new XMPPAccountDialog(new javax.swing.JFrame(), true);
             java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                xmppDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                       xmppDialog.setVisible(false);
                    }
                });
                //dialog.setVisible(true);
            }
        });
         }
         return xmppDialog;
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appidTable;
    private javax.swing.JButton applyButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField compressorTrigger;
    private javax.swing.JComboBox compressorType;
    private javax.swing.JTextField connectionPoolText;
    private javax.swing.JButton deleteAppIdButton;
    private javax.swing.JTextField fetchLimitTextField1;
    private javax.swing.JTextField fetcherNumText;
    private javax.swing.JCheckBox isHttpProxyEnable;
    private javax.swing.JCheckBox isXMPPEnable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField localHttpProxyHostText;
    private javax.swing.JPasswordField localHttpProxyPassText;
    private javax.swing.JTextField localHttpProxyPortText;
    private javax.swing.JTextField localHttpProxyUserText;
    private javax.swing.JTextField localServerHostText;
    private javax.swing.JTextField localServerPortText;
    private javax.swing.JButton modifyAppIdButton;
    private javax.swing.JButton modifyXmppButton;
    private javax.swing.JButton newAppIdButton;
    private javax.swing.JButton newXmppButton;
    private javax.swing.JButton removeXmppButton;
    private javax.swing.JTextField rpcTimeoutText;
    private javax.swing.JTextField threadPoolSizeText;
    private javax.swing.JTable xmppAccountTable;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel appIdTableModel = new MyTableModel();
    private DefaultTableModel xmppTableModel = new MyTableModel();

   private Map<String, AppIdAuth> appids = new HashMap<String, AppIdAuth>();
   private Map<String, XmppAccount> xmppAccounts = new HashMap<String, XmppAccount>();
    private AppIdDialog appidDialog = null;
    private XMPPAccountDialog xmppDialog = null;
}
